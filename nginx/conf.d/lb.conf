js_import /etc/nginx/conf.d/join.js;
js_import /etc/nginx/conf.d/fetch.js;

map $uri $uri_prefix {
    ~^(?<p>.+)\/.+$ $p;
}

map $uri $uri_suffix {
    ~^.+\/(?<s>.+)$ $s;
}

resolver kube-dns.kube-system.svc.cluster.local valid=5s;
upstream frontend {
    zone frontend 64k;
    server frontend-svc.f5poc.svc.cluster.local service=_http._tcp resolve;
}
upstream api {
    zone api 64k;
    server api-svc.f5poc.svc.cluster.local service=_http._tcp resolve;
}
upstream ws {
    zone ws 64k;
    server ws-svc.f5poc.svc.cluster.local service=_http._tcp resolve;
}
upstream login {
    zone login 64k;
    server login-svc.f5poc.svc.cluster.local service=_http._tcp resolve;
}
server {
    status_zone myapp.com;
    listen 80;
    server_name web.myapp.com www.myapp.com;
    location / {
        error_page 405 =200 $uri;
        limit_except GET POST {
            deny all;
        }
        proxy_pass http://frontend;
        health_check;
    }
    location /media {
        alias /usr/share/nginx/vdo;
    }
}
server {
    status_zone api.myapp.com;
    listen 80;
    server_name api.myapp.com;
    location / {
        sub_filter_once off;
        sub_filter 'server_hostname' '$upstream_last_server_name';
        proxy_pass http://api;
        health_check;
    }
    location /frontpage {
        js_content join.join_subrequests;
    }
    location /profile {
        js_content fetch.getProfile;
    }
    location /myapi/ {
        proxy_pass http://api/;
    }
    # location /secure/ {
    #     auth_jwt "closed site";
    #     auth_jwt_key_request /_jwks_uri;
    #     # proxy_set_header Authorization "Bearer $jwt_payload";
    #     proxy_pass http://api/;
    # }

    # location = /_jwks_uri {
    #     internal;
    #     proxy_method GET;
    #     proxy_pass https://keycloak.myapp.com/realms/master/protocol/openid-connect/certs; # Obtain keys from here
    # }
}
server {
    status_zone ws.myapp.com;
    listen 80;
    server_name ws.myapp.com;
    location / {
        proxy_pass http://ws;
        #health_check;
    }
}

server {
    status_zone media.myapp.com;
    listen 80;
    server_name media.myapp.com;
    location / {
        alias /usr/share/nginx/vdo;
    }
}

server {
    listen 80;
    server_name dashboard.myapp.com;
    # ...

    location /api {
        api write=on;
        # allow 192.168.1.0/24;
        # deny  all;
    }

    location = /dashboard.html {
        root /usr/share/nginx/html;
    }
}

server {
    status_zone login.myapp.com;
    listen 80;
    server_name login.myapp.com;
    location / {
        error_page 405 =200 $uri;
        limit_except GET POST {
            deny all;
        }
        proxy_pass http://login;
        health_check;
    }
}